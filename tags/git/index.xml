<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on 林三木的博客</title><link>https://linjiasen63.github.io/tags/git.html</link><description>Recent content in git on 林三木的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 01 Apr 2021 09:22:22 +0000</lastBuildDate><atom:link href="https://linjiasen63.github.io/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>git基础：规范式提交</title><link>https://linjiasen63.github.io/posts/programming/base/git/conventional.html</link><pubDate>Thu, 01 Apr 2021 09:22:22 +0000</pubDate><guid>https://linjiasen63.github.io/posts/programming/base/git/conventional.html</guid><description>参考：
阮一峰：Commit message 和 Change log 编写指南
1. 格式约定 &amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt; // 空一行 &amp;lt;body&amp;gt; // 空一行 &amp;lt;footer&amp;gt; 其中type、subject是必须的
1.1 提交类型 feat：新功能（feature） fix：修补bug docs：文档（documentation） style： 格式（不影响代码运行的变动） refactor：重构（即不是新增功能，也不是修改bug的代码变动） test：增加测试 chore：构建过程或辅助工具的变动 1.2 作用范围 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。
2. 具体配置 npm i -D commitizen # 初始化适配器 commitizen init cz-conventional-changelog --save-dev --save-exact # 配置回调函数 npm i -D husky npx husky install # commit msg之前 npx husky add .husky/prepare-commit-msg &amp;#34;exec &amp;lt; /dev/tty &amp;amp;&amp;amp; git cz --hook || true&amp;#34; # 提交格式检查工具 npm i -D @commitlint/config-conventional @commitlint/cli # Configure commitlint to use conventional config echo &amp;#34;module.exports = {extends: [&amp;#39;@commitlint/config-conventional&amp;#39;]}&amp;#34; &amp;gt; commitlint.config.js # commit msg之后 npx husky add .</description></item><item><title>git基础：cherry-pick</title><link>https://linjiasen63.github.io/posts/programming/base/git/cherry-pick.html</link><pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate><guid>https://linjiasen63.github.io/posts/programming/base/git/cherry-pick.html</guid><description>对于多分支的代码库，将代码从一个分支转移到另一个分支是常见需求。这时分两种情况。一种情况是，你需要另一个分支的所有代码变动，那么就采用合并（git merge）。另一种情况是，你只需要部分代码变动（某几个提交），这时可以采用 Cherry pick。
参考资料
阮一峰的 git cherry-pick 教程
1. 基本用法 git cherry-pick &amp;lt;commitHash&amp;gt; git cherry-pick &amp;lt;commitHashA&amp;gt; &amp;lt;commitHashB&amp;gt; # 转移从 A 到 B 的所有提交。(不包含A) # 它们必须按照正确的顺序放置：提交 A 必须早于提交 B，否则命令将失败，但不会报错 git cherry-pick &amp;lt;commitHashA&amp;gt;..&amp;lt;commitHashB&amp;gt; # 转移从 A 到 B 的所有提交。(包含A) git cherry-pick &amp;lt;commitHashA&amp;gt;^..&amp;lt;commitHashB&amp;gt; 2. 额外配置 # 打开外部编辑器，编辑提交信息 # -e，--edit # 只更新工作区和暂存区，不产生新的提交 # -n，--no-commit # 在提交信息的末尾追加一行(cherry picked from commit ...)，方便以后查到这个提交是如何产生的。 # -x # 在提交信息的末尾追加一行操作者的签名，表示是谁进行了这个操作 # -s，--signoff # 如果原始提交是一个合并节点，来自于两个分支的合并，那么 cherry pick 默认将失败，因为它不知道应该采用哪个分支的代码变动。 # -m配置项告诉 Git，应该采用哪个分支的变动。它的参数parent-number是一个从1开始的整数，代表原始提交的父分支编号。 # -m parent-number，--mainline parent-number 3. 代码冲突 如果操作过程中发生代码冲突，cherry pick 会停下来，让用户决定如何继续操作。
3.1 继续 用户解决代码冲突后，第一步将修改的文件重新加入暂存区（git add .），第二步使用下面的命令，让 cherry pick 过程继续执行。
git cherry-pick --continue 3.2 中止 发生代码冲突后，放弃合并，回到操作前的样子。
git cherry-pick --abort 3.3 退出 发生代码冲突后，退出 cherry pick，但是不回到操作前的样子。</description></item><item><title>git基础：合并部分内容</title><link>https://linjiasen63.github.io/posts/programming/base/git/merge.html</link><pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate><guid>https://linjiasen63.github.io/posts/programming/base/git/merge.html</guid><description>功能介绍：将devp分支的部分修改合并到prod分支
# 1. git checkout 想要合并的分支 git checkout prod # 2. 合并内容 # 合并目录 # git checkout 更改所属的分支 文件夹/** git checkout devp src/user/** # 合并文件 # git checkout 更改所属的分支 合并的文件 git checkout devp src/index.html</description></item><item><title>git基础：常见问题</title><link>https://linjiasen63.github.io/posts/programming/base/git/question.html</link><pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate><guid>https://linjiasen63.github.io/posts/programming/base/git/question.html</guid><description>配置ssh后还需要验证帐号与密码 原因：由于ssh只对以git@开头的仓库地址起作用（https仓库链接无效）。 有两种方法可解决此问题：
只需要将仓库地址以git@开头的； 在本地保存登录信息：执行命令 git config --global credential.helper store ，再执行git操作（ git pull 或 git push等 ），此时仍会要求输入帐号与密码（输入正确后以后操作就不再需要）； 控制台输出的内容中文字符被转码 首先试试用 git config --global core.quotepath false。 如果不行再进行以下操作。git --no-pager log 能不能显示中文，如果不可以，则设置pager为more： git config --global core.pager more
参考链接</description></item><item><title>git基础：撤销内容更改</title><link>https://linjiasen63.github.io/posts/programming/base/git/recover.html</link><pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate><guid>https://linjiasen63.github.io/posts/programming/base/git/recover.html</guid><description>git log # 得到你需要回退一次提交的commit id 1. 在工作区 # 撤销修改 # 1.2 撤销指定文件 git checkout 1.txt # 1.2 撤销全部文件 git checkout . 2. 已暂存（add） # 2.1 撤销某个文件 # git reset HEAD ${文件名} git reset HEAD 1.txt # 2.2 撤销全部文件 git reset HEAD . 3. 已commit # 3.1 回到其中你想要的某个版本（代码或文件会被删除） git reset --hard ${commit_id} # 3.2 回到上一次提交（代码或文件会被删除） git reset --hard HEAD^ # 3.3 回到上一次提交，但保留相应的修改内容到工作区中 git reset HEAD^ 4. 已经push # 4.1 回到指定的commit，之后commit都会被删除 # 删除本地仓库中的内容 # git reset --hard ${commit_id} git reset --hard 9ee7a57df2c510b578c96b9320a95d96ec7af282 # 强制提交一次，之前的错误提交会从远程仓库中删除 git push origin HEAD --force # 4.2 内容还原到指定的commit，之后的commit记录会被保留 # git revert ${commit_id} git revert 9ee7a57df2c510b578c96b9320a95d96ec7af282</description></item></channel></rss>
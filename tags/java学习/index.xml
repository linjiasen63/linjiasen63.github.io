<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java学习 on 林三木的博客</title><link>https://linjiasen63.github.io/tags/java%E5%AD%A6%E4%B9%A0.html</link><description>Recent content in java学习 on 林三木的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 29 Dec 2020 23:34:31 +0000</lastBuildDate><atom:link href="https://linjiasen63.github.io/tags/java%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml"/><item><title>服务端学习之java基础系列：输入输出</title><link>https://linjiasen63.github.io/posts/programming/java/java-se/intput-output.html</link><pubDate>Tue, 29 Dec 2020 23:34:31 +0000</pubDate><guid>https://linjiasen63.github.io/posts/programming/java/java-se/intput-output.html</guid><description>1. File类 java.io.File，文件与目录的抽象表示形式
1.1 File的静态常量 // 与系统有关的路径分隔符 static String pathSeparator // 为方便，为字符串 static char pathSeparatorChar // mac: 冒号` :` // win: 分号` ;` // 与系统有关的默认名称分隔符 static String separator // 为方便，为字符串 static char separatorChar // mac: 正叙扛` /` // win: 反叙扛`\` 1.2 构造方法 public File(String pathname) public File(String parent, String child) public File(File parent, String child) 1.3 常用方法 1.3.1 获取 // 返回此File的绝对路径 public String getAbsolutePath() // 返回此File的创建时传入的path // toString就是调用getPath public String getPath() // 返回File表示文件或目录的名称 public String getName() // 返回File表示的文件长度，指向的文件大小， // 若为文件夹返回0；若文件不存在返回0 public long length() 1.3.2 判断 // 判断File表示的目录或文件是否存在 public boolean exists() // 判断是否为目录 public boolean isDirectory() // 判断是否为文件 public boolean isFile() 1.</description></item><item><title>服务端学习之java基础系列：函数式编程</title><link>https://linjiasen63.github.io/posts/programming/java/java-se/functional.html</link><pubDate>Tue, 29 Dec 2020 23:16:42 +0000</pubDate><guid>https://linjiasen63.github.io/posts/programming/java/java-se/functional.html</guid><description>1. lambda 从jdk8开始支持，条件如下：
必须具有接口，且接口中有仅仅有一个抽象方法 必须具有上下文推断 有且只有一个方法接口，称之为：函数式接口。
public static void main(String[] args) { new Thread(() -&amp;gt; { System.out.println(&amp;#34;Hello world!&amp;#34;); }).start(); } 由以下组成：
一些参数 一个箭头 一段代码 标准格式：(参数列表) -&amp;gt; { 一些重写方法的代码 }
1.1 示例 public static void main(String[] args) { Integer[] arr = { 1, 2, 4, 3 }; Arrays.sort(arr, (Integer o1, Integer o2) -&amp;gt; { return o2 - o1; }); System.out.println(Arrays.toString(arr)); } 可推导，可省略。凡是根据上下文推导出来的内容都可以省略不写
括号中的参数列表的数据类型 括号中的参数列表只有一个，类型和()都可省略 如果{}中的代码只有一行，无论是否有返回值，都可以省略（{}，return, 分号），这三者需要一起省略。 public static void main(String[] args) { Integer[] arr = { 1, 2, 4, 3 }; Arrays.sort(arr, (o1, o2) -&amp;gt; o2 - o1); System.out.println(Arrays.toString(arr)); }</description></item><item><title>服务端学习之java基础系列：反射</title><link>https://linjiasen63.github.io/posts/programming/java/java-se/reflect.html</link><pubDate>Tue, 29 Dec 2020 13:58:31 +0000</pubDate><guid>https://linjiasen63.github.io/posts/programming/java/java-se/reflect.html</guid><description/></item><item><title>服务端学习之java基础系列：网络请求</title><link>https://linjiasen63.github.io/posts/programming/java/java-se/tip-ip.html</link><pubDate>Tue, 29 Dec 2020 13:58:31 +0000</pubDate><guid>https://linjiasen63.github.io/posts/programming/java/java-se/tip-ip.html</guid><description/></item><item><title>服务端学习之java基础系列：语法进阶</title><link>https://linjiasen63.github.io/posts/programming/java/java-se/syntax-advance.html</link><pubDate>Thu, 24 Dec 2020 00:00:00 +0000</pubDate><guid>https://linjiasen63.github.io/posts/programming/java/java-se/syntax-advance.html</guid><description>1. 常用接口 1.1 系统内置 1.1.1 Object // 子类可重写以定制输出内容 Object.toString(); // 子类可重写以定制对象比较 Object.equals(); 1.1.2 Objects // 对两个对象进行比较，防止空指针异常 Objects.equals(变量a, 变量b); 1.1.3 System public static long currentTimeMillis()：返回此毫秒为单位的当前时间 public static void arraycopy(object src, int srcPos, object dest, int destPos, int length)：将数组中的指定数据拷贝到另一个数组中 1.2 时间转换 1.2.1 Date java.util.Date表示时间和日期的类，特定的瞬间，精确到毫秒（千分之一秒）
时间戳是指从标准基准时间（历元），即1970年1月1日00:00:00(GMT：英国格林威治)以来的毫秒数
// 获取从历元到当前系统时间的毫秒数 long timestamp = System.currentTimeMillis(); // 注意：中国（CST）属于东八区，会把时间增加8个小时，即历元为：1970年1月1日08:00:00 // 获取当前时间（当前时区） Date d1 = new Date(); // 获取从历元经过指定毫秒的时间 Date d2 = new Date(0L); // 将日期转换为毫秒 long timestamp1 = d1.getTime(); // 转换本地时间（已过期） System.out.println(d1.toLocalString()); 1.2.2 DateFormat java.text.DateFormat，是抽象类。按照指定模式，进行日期与文本之间的转换。
SimpleDateFormat dateFormat = new SimpleDateFormat(&amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;); // 格式化 String dateStr = dateFormat.format(date); System.out.println(dateStr); // 2020-12-24 00:09:59 // 解析：可能throw exception date = dateFormat.</description></item><item><title>服务端学习之java基础系列：语法基础</title><link>https://linjiasen63.github.io/posts/programming/java/java-se/syntax-basic.html</link><pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate><guid>https://linjiasen63.github.io/posts/programming/java/java-se/syntax-basic.html</guid><description>1. 计算机通识 1.1 进制转换 辗转相除法（十进制转换为其它进制） 位权累加法（其它进制转换为十进制） 1.2 存储单位 1bit = 位（表示0或1） 1Byte = 8bit （数据存储的最小单元） 1KB = 1024Byte 1MB = 1024KB 1GB = 1024MB 1TB = 1024GB 1PB = 1024TB &amp;hellip; 1.3 Java简介 95年发布，已有20来年的历史。目前大部分公司使用的主要版本还是java8。
java编写的程序是跨平台的，但是JVM是非跨平台的（每种平台都有各自版本的JVM）
JDK = 编译器等开发工具 + JRE； JRE = 运行类库 + JVM； 1.3.1 DOS 盘符切换，如：D: (${磁盘标识}:) 切换目录 cd 清除 cls （全写：clear screen） 退出 exit 1.3.2 安装 配置JAVA_HOME 配置PATH mac下无需如此，开发配置简单。
1.3.3 jshell 从java9开始支持
# 进入 jshell # 退出 /exit 2. 基本语法 2.1 HelloWorld // public的类名必须与文件名大小写一致 public class HelloWorld { // 程序的执行入口 public static void main(String[] args) { System.</description></item></channel></rss>
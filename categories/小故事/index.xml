<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>小故事 on 林三木的博客</title><link>https://linjiasen63.github.io/categories/%E5%B0%8F%E6%95%85%E4%BA%8B.html</link><description>Recent content in 小故事 on 林三木的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 29 Jan 2021 15:42:48 +0000</lastBuildDate><atom:link href="https://linjiasen63.github.io/categories/%E5%B0%8F%E6%95%85%E4%BA%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>小故事：沉没成本</title><link>https://linjiasen63.github.io/posts/life/stories/2021/01/29-0.html</link><pubDate>Fri, 29 Jan 2021 15:42:48 +0000</pubDate><guid>https://linjiasen63.github.io/posts/life/stories/2021/01/29-0.html</guid><description>参考链接
沉没成本实例 　2001年诺贝尔经济学奖获得者之一的美国经济学家斯蒂格利茨还用一个生活中的例子来说明什么是沉没成本。他说，“假如你花7美元买了一张电影票，你怀疑这个电影是否值7美元。看了半个小时后，你最担心的事被证实了：影片糟透了。你应该离开影院吗?在做这个决定时，你应当忽视那7美元。它是沉没成本，无论你离开影院与否，钱都不会再收回。”斯蒂格利茨在这里不但生动地说明了什么是沉没成本，而且还指明了我们对待沉没成本应持怎样的态度。</description></item><item><title>小故事：油漆工算法</title><link>https://linjiasen63.github.io/posts/life/stories/2021/01/28-0.html</link><pubDate>Thu, 28 Jan 2021 14:06:11 +0000</pubDate><guid>https://linjiasen63.github.io/posts/life/stories/2021/01/28-0.html</guid><description>以下一则小故事被用来讽刺gitbook在数据量增长过程中编译速度的变化，其形象地描述了gitbook内部使用的算法，该算法是多么的令人哭笑不得。
老王得到一份当街道油漆匠的工作，工作内容是在马路中间喷涂点画线。第一天， 他拿出一罐漆来到他负责的路段，喷涂了 300 码长的线。“干得不错！ ”他的老板称赞道， “真是一位麻利的工匠”，然后赏给他一个戈比（一种俄罗斯辅币，译者注）。
第二天，老王只喷涂了 150 码。“喏，虽然不如昨天那样好，但你仍然算得上一位 麻利的工匠！ 150 码还是值得肯定的一个长度，”老板说完又赏给他一戈比。
接下来的一天，老王只喷涂了 30 码长的马路。“才 30 码！”他的老板吼道。“这太 令人难以接受了！第一天你干的工作量是今天的 10 倍！接下来是怎么回事？”
“我尽力了，”老王说道。“一天一天下去，我离油漆罐越来越远！”
在我们日常的编码中，同样需要注意此类问题，兼顾在数据量级变大情况下程序的执行效率，不单单兼容目前情况。这特别类似于测试同事提出问题，而开发同事反馈：在本人的设备上是正常的。</description></item></channel></rss>
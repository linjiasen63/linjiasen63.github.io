<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>algorithm on 林三木的博客</title><link>https://linjiasen63.github.io/categories/algorithm.html</link><description>Recent content in algorithm on 林三木的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 25 Mar 2021 16:38:44 +0000</lastBuildDate><atom:link href="https://linjiasen63.github.io/categories/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>数据结构与算法：常见的排序算法</title><link>https://linjiasen63.github.io/posts/programming/algorithm/sort-algorithm.html</link><pubDate>Thu, 25 Mar 2021 16:38:44 +0000</pubDate><guid>https://linjiasen63.github.io/posts/programming/algorithm/sort-algorithm.html</guid><description>1. 冒泡排序 时间复杂度：O(n^2)
function bubbleSort(arr) { for(let i=0; i&amp;lt;arr.length-1; i++) { for(let j=0; j&amp;lt;arr.length-i-1; j++) { if (arr[j] &amp;gt; arr[j+1]) { const temp = arr[j]; arr[j] = arr[j+1]; arr[j+1] = temp; } } } } const arr = [10, 8, 22, -6, 10, 9]; bubbleSort(arr); console.log(arr); 2. 选择排序 时间复杂度：O(n^2)
function selectSort(arr) { for(let i=0; i&amp;lt;arr.length; i++) { let index = i; for(let j=i+1; j&amp;lt;arr.length; j++) { if (arr[index] &amp;gt; arr[j]) { index = j; } } if (index != i) { const temp = arr[i]; arr[i] = arr[index]; arr[index] = temp; } } } const arr = [10, 8, 22, -6, 10, 9]; selectSort(arr); console.</description></item><item><title>数据结构与算法：初识</title><link>https://linjiasen63.github.io/posts/programming/algorithm/tutorial-basic.html</link><pubDate>Mon, 15 Mar 2021 14:13:45 +0000</pubDate><guid>https://linjiasen63.github.io/posts/programming/algorithm/tutorial-basic.html</guid><description>1. 数据结构与算法 1.1 数据结构 数据结构按照存储方式进行分类，如下所示：
逻辑结构：数据存储在虚拟逻辑的方式； 集合 线性 树型 图型 物理结构：数据存储在物理介质的方式； 物理介质有硬盘、内存等 按照逻辑结构与物理结构的异同
顺序存储结构：逻辑结构与物理结构一致 链式存储结构：逻辑结构与物理结构不同 1.2 算法 算法设计的基本准则
确定性 可行性 可读性 健壮性 算法效率的评估方式
时间效率 存储容量 时间算法 名称 O(1) 常数 O(n) 线性 O(log(2)n) 对数 O(nlog(2)n) nlog(2)n O(n^2) 平方 O(n^3) 立方 对数时间复杂度的代码示例以及计算过程 function calc(n) { let i = 1; while(i * 2 &amp;lt;= n) { /*执行操作*/ } } // 执行次数：2^x = n，即：x=log(2)N 2. 线性表 2.1 数组 时间复杂度
查询（retireve）：O(1) 更新（update）：O(1) 插入（insert）：O(n) 删除（delete）：O(n) 2.</description></item></channel></rss>